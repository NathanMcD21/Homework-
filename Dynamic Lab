scopearray = ["scope_0.csv"; "scope_1.csv";"scope_2.csv";"scope_3.csv";
    "scope_4.csv";"scope_5.csv";"scope_6.csv";"scope_7.csv";"scope_8.csv";
  "scope_9.csv";"scope_10.csv";"scope_11.csv";"scope_12.csv"] ;


function DampingFunc(x,set)
%% Acquiring Data and Fourier Transform
x = importdata('Scope_4.csv',',',4); 
t = x.data(:,1);
v = x.data(:,2); 

both = [v,t];
dt=0.0001;

[rowIdcs,~] = find(isnan(both)); 
both(rowIdcs,:) = [];

subplot(3,1,1)
plot(both); %just plots the data as a whole and shows the natural...
xlabel('Time(s)'); ylabel('Voltage(V)');

n = length(t);
fhat = fft(both,n);
PSD = fhat.*conj(fhat)/n;
freq = 1/(dt*n)*(0:n);
L = 1:floor(n/2);

p = [freq(L);PSD(L)];

subplot(3,1,2)
plot(p(1,:),p(2,:),'c','LineWidth',1)
%%
[maxpow] = findpeaks(p(2,:),'threshold',5);
loca = find(p(2,:)== maxpow); 
w = p(1,loca); 

%% Finding the Positive Peaks
[pks,locs] = findpeaks(both(:,1),'minpeakheight',.1); 
%determines both the maximum and minumum peaks for the data, includes noise
%need to figure out how to get rid of majority of noise

final = [pks,locs]; 
%creates an array that contains all peaks and the time they occur

[rowIdcs,~] = find(final<0); %determines each negative peak
final(rowIdcs,:) = []; %deletes the negative peak and time data

%% Fitting an exponential and Determining Necessary Coeffiecients

%fits an exponential plot to the the positive peaks 
efit = fit(final(:,2),final(:,1),'exp1'); 
A = efit.a; %gives the a coefficient of y = a*exp(b*x) 
B = efit.b; %gives the b coefficient of y = a*exp(b*x) 

%% Plotting Exponential Fit 

%plots the data as a scatter plot with the exponential trend overlaying
subplot(3,1,3)
scatter(final(:,2),final(:,1),'filled')
hold on 
plot(efit) 
xlabel('Time(s)'); ylabel('Voltage(V)');
hold off 

%% Solving for Damping Coeffiecent 

b = B/w;
wn = w/(sqrt(1-(b^2)));

table(b,wn)
end


 


